# 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용한다.
# 일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적이다.
# 계수 정렬은 비교 방식이 아닌, 별도의 리스트를 선언하고 그 안에 정렬에 대한 정보를 담는다.
# 계수 정렬은 먼저 가장 큰 데이터와 가장 작은 데이터의 범위가 모두 담길 수 있도록 하나의 리스트를 생성한다.
# 처음에 리스트의 모든 데이터가 0이 되도록 초기화한다.
# 그다음 데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시키면 계수 정렬이 완료된다.

array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

def CountSort(array):
    result = []
    countList = [0] * (max(array) + 1)
    for i in array:
        countList[i] += 1

    for i in range(len(countList)):
        for k in range(countList[i]):
            result.append(i)
    return result

print(CountSort(array))

# 계수 정렬은 시간적인 효율은 뛰어나지만, 리스트 하나를 선언함으로 공간 복잡도를 초례한다.
# 만약 데이터가 0과 999,999 단 2개만 존재한다해도, 복잡도가 상당히 늘어나게 된다.

# 파이썬에서 기본으로 제공하고 있는 sorted()는 퀵 정렬과 동작 방식이 비슷한 병렬 정렬을 기반으로 만들었다.
# 이는 퀵 정렬보다 느리지만 최악의 경우에도 일정한 복잡도를 유지한다.